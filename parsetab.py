
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'EQUALS FLOAT INT NAME\n    statement : NAME EQUALS expression\n    \n    statement : expression\n    \n    expression : INT\n               | FLOAT\n    \n    expression : NAME\n    '
    
_lr_action_items = {'NAME':([0,6,],[2,7,]),'INT':([0,6,],[4,4,]),'FLOAT':([0,6,],[5,5,]),'$end':([1,2,3,4,5,7,8,],[0,-5,-2,-3,-4,-5,-1,]),'EQUALS':([2,],[6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,6,],[3,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','compYacc.py',10),
  ('statement -> expression','statement',1,'p_statement_expr','compYacc.py',20),
  ('expression -> INT','expression',1,'p_expression_Number','compYacc.py',28),
  ('expression -> FLOAT','expression',1,'p_expression_Number','compYacc.py',29),
  ('expression -> NAME','expression',1,'p_expression_name','compYacc.py',35),
]
